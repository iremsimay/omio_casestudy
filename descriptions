
## ER Diagram



                             +-------------------------------+
                             |         dim_segment           |
                             |-------------------------------|
                             | segmentId (PK)                |
                             | carrierName                   |
                             | departureDatetime             |
                             | arrivalDatetime               |
                             | travelMode                    |
                             +-------------------------------+

                                   |              ^
                                   |              |
                                   |              |
                                   v              |
 +-------------------------------+   +-------------------------------+
 |     map_ticket_segment        |   |     map_ticket_passenger       |
 |-------------------------------|   |-------------------------------|
 | ticketId (PK)                 |   | ticketId (PK)                  |
 | segmentId (PK)                |   | passengerId (PK)               |
 +-------------------------------+   +-------------------------------+
          ^         |                       ^         |
          |         |                       |         |
          |         v                       |         v

                             +-------------------------------+
                             |          dim_ticket           |
                             |-------------------------------|
                             | ticketId (PK)                 |
                             | vendorCode                    |
                             | bookingCurrency               |
                             | bookingPrice                  |
                             | bookingId                     | 
                             +-------------------------------+

                                         |
                                         |
                                         v

                             +-------------------------------+
                             |         fact_booking          |
                             |-------------------------------|
                             | bookingId (PK)                |
                             | createdAt                     |
                             | updatedAt                     |
                             | userSelectedCurrency          |
                             | partnerIdOffer                |
                             | total_booking_price           |
                             | ticket_count                  |
                             | passenger_count               |
                             +-------------------------------+

                                         ^
                                         |
                                         |

                             +-------------------------------+
                             |        dim_passenger          |
                             |-------------------------------|
                             | passengerId (PK)              |
                             | type                          |
                             | bookingId                     | 
                             +-------------------------------+


# Defining keys, relationships
Primary Keys (PK):

fact_booking: bookingId (PK)
dim_ticket: ticketId (PK)
dim_passenger: passengerId (PK)
dim_segment: segmentId (PK)
map_ticket_segment: composite PK (ticketId, segmentId)
map_ticket_passenger: composite PK (ticketId, passengerId)

Foreign Keys (FK):

fact_booking links to tickets, passengers, segments via map tables
map_ticket_segment joins dim_ticket ↔ dim_segment
map_ticket_passenger joins dim_ticket ↔ dim_passenger

Relationships

fact_booking is the central fact table at bookingId grain
Dimensions describe entities (ticket, passenger, segment)
Map tables resolve many-to-many relationships between tickets and passengers/segments

# Why I chose this structure

We use a star schema with a central fact_booking table representing booking-level transactional data, joined to dimension tables for tickets, passengers, and segments.
This structure supports:
Simplified analytics queries by flattening complex JSON source into clear tables.
Separation of business metrics (fact) from descriptive attributes (dimensions).
High flexibility for reporting, allowing slicing and dicing by ticket, passenger, and segment attributes.
We also include map tables to accurately model many-to-many relationships:
One ticket may include multiple segments (e.g., outbound/return).
One ticket may be shared by multiple passengers (like a group booking).
Using map tables keeps the star schema normalized and avoids data duplication, ensuring data integrity and making the model easier to maintain and extend.


## Documentation
Summary of Data Model & Design Decisions

We designed a star schema with:
fact_booking at the center (grain = bookingId), contains booking-level metrics: total price, ticket and passenger counts
dim_ticket, dim_passenger, dim_segment as dimensions, describe tickets, passengers, travel segments with unique IDs
map_ticket_segment and map_ticket_passenger as map tables, resolve many-to-many relationships (e.g., a ticket covering multiple segments or passengers)

Design Rationale:
Star schema supports clear, performant analytics queries, dimensions keep descriptive attributes separated from metrics
Map tables maintain many-to-many relationships without data duplication, unnested raw JSON structure enables easier reporting and transformation


How Data Quality is Enforced
We use dbt tests to enforce data quality at every layer: Pre-transform (Staging) Tests, Unique + not_null constraints on IDs,
Ensure raw JSON un-nesting produces clean tables
Post-transform (Fact/Dim) Tests, PK uniqueness on dimension and fact tables
Business logic tests, such as passenger_count >= 1 for every booking, total_booking_price >= 0
Advanced Time-aware tests, such as daily ticket volume vs. 7-day average, alerts on unexpected drops, catching silent failures
Snapshots, track changes over time via updatedAt, answer questions like: "When did this booking's price change?" "What was the offer partner when the user first booked?"

How Stakeholders Can Trust & Explore the Data
Stakeholders can trust and explore the data confidently thanks to clear dbt documentation with column-level tests, interactive lineage graphs for tracing metrics to sources. 
Time-aware monitoring with historical aggregates and anomaly detection guards against silent failures,
while snapshots provide full change history for auditability and point-in-time analysis, ensuring the data remains clean, reliable, and aligned with business needs.


# One-pager for PMs (non-technical audience)

Purpose of This Data Model
We’ve built a clean, reliable data model to help the business answer key questions about bookings, tickets, passengers, and travel segments. The goal is to transform messy, nested raw export data into clear, easy-to-analyze tables.

Key Features
Booking-Centric View: One central table summarizing each booking with total price, number of tickets, and passenger count.
Detailed Dimensions: Separate tables for tickets, passengers, and travel segments let you slice and analyze data however you need.
Map Tables: Capture complex real-world cases where one ticket can cover multiple segments or passengers.

Data Quality & Trust
Built-in rules ensure no missing or duplicate records.
Business rules are checked automatically (every booking must have at least one passenger).
Historical changes (like price updates) are tracked over time.
Automated daily checks alert us if something looks wrong, like sudden drops in booking volume.

Benefits for the Business
PMs can confidently use the data for reporting, dashboards, and strategic decisions.
Supports clear visibility into trends, revenues, and customer behavior.

Enables easy answering of questions like:
How many passengers were booked last month?, Which partner had the highest sales?, When did the booking’s price change?

Bottom Line:
This model turns raw booking data into trustworthy, actionable insights for better decision-making.

# What are core data KPIs you’d monitor in a travel company?

These KPIs given below may support business and product teams about customer demands, product performance, and revenue.

Total Bookings per Day/Week/Month: Track volume trends, seasonality, and growth.

Total Revenue: Sum of booking or ticket prices (in consistent currency).

Average Booking Value (ABV): Revenue per booking, helps identify high-value customers or products.

Cancellation Rate: Percentage of bookings cancelled before departure.

Passengers per Booking: Detect solo vs group travel behavior.

New vs Returning Users: Understand user retention and acquisition trends.

Popular Routes or Segments: Which destinations or carriers are most booked.

