

sources:
  - name: raw
    schema: raw
    tables:
      - name: raw_bookings
        description: "Single nested JSON export of booking, passenger, segment, ticket data"

models:
  - name: stg_booking
    description: "Flattened booking header"
    columns:
      - name: bookingId
        tests: [unique, not_null]

  - name: stg_ticket
    description: "Flattened ticket data"
    columns:
      - name: ticketId
        tests: [unique, not_null]

  - name: stg_passenger
    description: "Flattened passenger data"
    columns:
      - name: passengerId
        tests: [unique, not_null]

  - name: stg_segment
    description: "Flattened segment data"
    columns:
      - name: segmentId
        tests: [unique, not_null]

  - name: map_ticket_segment
    description: "Map table linking tickets to segments (M2M)"
    columns:
      - name: ticketId
        tests: [not_null]
      - name: segmentId
        tests: [not_null]
      - tests:
          - dbt_utils.unique_combination_of:
              combination_of: [ticketId, segmentId]

  - name: map_ticket_passenger
    description: "Map table linking tickets to passengers (M2M)"
    columns:
      - name: ticketId
        tests: [not_null]
      - name: passengerId
        tests: [not_null]
      - tests:
          - dbt_utils.unique_combination_of:
              combination_of: [ticketId, passengerId]

- name: fact_booking
    description: "Booking-level fact table"
    columns:
      - name: bookingId
        tests: [unique, not_null]
      - name: total_booking_price
        tests:
          - dbt_utils.expression_is_true:
              expression: "total_booking_price >= 0"
      - name: ticket_count
      - name: passenger_count
        tests:
          - dbt_utils.expression_is_true:
              expression: "passenger_count >= 1"

  - name: dim_ticket
    description: "Ticket dimension"
    columns:
      - name: ticketId
        tests: [unique, not_null]

  - name: dim_passenger
    description: "Passenger dimension"
    columns:
      - name: passengerId
        tests: [unique, not_null]

  - name: dim_segment
    description: "Segment dimension"
    columns:
      - name: segmentId
        tests: [unique, not_null]


# We completed our technical tests in yml documentation while creating stg tables from json file. (pre transform to catch issues in raw ingested data before transformation.)
# Also added business logic tests to fact table to check passanger count and booking price
# We completed post transform test to validate that business rules and logic have been correctly applied and that outputs (like KPIs) are accurate.
# We completed technical tests via focus on structural integrity such as  PK uniqueness, not_null constraints
# We completed business tests via validate domain-specific rules and expectations such as "Every booking has ≥1 passenger", "Total booking price ≥ 0"
# To test seasonality anomalies like Train strikes, we can recognize planned or expected data anomalies (e.g. holidays, strikes),
  maintain an event calendar dimension flagging these dates. adjust anomaly detection thresholds or exclude these periods from alerts.



